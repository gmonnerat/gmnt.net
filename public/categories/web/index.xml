<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Gabriel&#39;s blog</title>
    <link>//gmonnerat.github.io/public/categories/web/index.xml</link>
    <description>Recent content on Gabriel&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="//gmonnerat.github.io/public/categories/web/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Playing with history interface</title>
      <link>//gmonnerat.github.io/public/post/playing-with-history-interface/</link>
      <pubDate>Thu, 21 Apr 2016 05:22:55 +0200</pubDate>
      
      <guid>//gmonnerat.github.io/public/post/playing-with-history-interface/</guid>
      <description>&lt;p&gt;I have been playing with &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/History&#34;&gt;History&lt;/a&gt; recently and I commit my sample &lt;a href=&#34;https://github.com/gmonnerat/history-api-sample&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;My goal was seeing how to navigate in the website without reload the page, like with &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onhashchange&#34;&gt;onhashchange&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The difference is, the page does not reload when you change the hash. But, with &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/History&#34;&gt;History&lt;/a&gt;, I used the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/Events/click&#34;&gt;click&lt;/a&gt; event to get the same behaviour.&lt;/p&gt;

&lt;p&gt;I still don&amp;rsquo;t know if using &lt;a href=&#34;ttps://developer.mozilla.org/en-US/docs/Web/Events/click&#34;&gt;click&lt;/a&gt; is good or not. But, until now, is working fine.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Skeleton to my web applications in Go</title>
      <link>//gmonnerat.github.io/public/post/go-web-application-skeleton/</link>
      <pubDate>Fri, 15 Apr 2016 00:38:21 +0200</pubDate>
      
      <guid>//gmonnerat.github.io/public/post/go-web-application-skeleton/</guid>
      <description>&lt;p&gt;I just published my skeleton that I use to write Web Applications,
&lt;a href=&#34;https://github.com/gmonnerat/go-web-application-skeleton&#34;&gt;go-web-application-skeleton&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Ever since I started to study &lt;a href=&#34;https://golang.org/&#34;&gt;Go&lt;/a&gt;, I was trying to create web applications in only one binary file.&lt;/p&gt;

&lt;p&gt;And with &lt;a href=&#34;https://github.com/jteeuwen/go-bindata&#34;&gt;go-bindata&lt;/a&gt; it is possible.&lt;/p&gt;

&lt;p&gt;I can send(or move) the binary to my server without problems:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ make build
go-bindata static/... templates/...
$ go build
$ mv go-web-application-skeleton /tmp/
$ cd /tmp/
$ ./go-web-application-skeleton

$ curl -i http://localhost:8080/static/favicon.ico | head -n 1
    HTTP/1.1 200 OK
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;No access to the file system!&lt;/p&gt;

&lt;p&gt;To avoid run go-bindata command every time, I use
&lt;a href=&#34;https://github.com/yosssi/goat&#34;&gt;goat&lt;/a&gt; and to restart the server when
there are changes, I use &lt;a href=&#34;https://github.com/pilu/fresh&#34;&gt;fresh&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;OBS: It is still work-in-progress and not tested. So, please use it to prototype new applications only.&lt;/p&gt;

&lt;p&gt;Enjoy! Feel free to report issues.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Moving from Nginx to Caddy</title>
      <link>//gmonnerat.github.io/public/post/moving-from-nginx-to-caddy/</link>
      <pubDate>Fri, 11 Dec 2015 00:56:07 +0100</pubDate>
      
      <guid>//gmonnerat.github.io/public/post/moving-from-nginx-to-caddy/</guid>
      <description>&lt;p&gt;After see the release of &lt;a href=&#34;https://caddyserver.com/blog/caddy-0_8-released&#34;&gt;Caddy 0.8 with Let&amp;#39;s Encrypt integration&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I installed Caddy downloading the package from this &lt;a href=&#34;https://caddyserver.com/download&#34;&gt;page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After download and extract the binary, I ran it with my initial &lt;a href=&#34;https://caddyserver.com/docs/caddyfile&#34;&gt;Caddyfile&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gmnt.net, www.gmnt.net {
  gzip
  root /home/gabriel/gmnt.net/public 

  log /home/gabriel/caddy/blog.log {
    rotate {
      size 100 # Rotate after 100 MB
      age  14  # Keep log files for 14 days
      keep 10  # Keep at most 10 log files
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I know that exists one extension to integrate &lt;a href=&#34;https://caddyserver.com/&#34;&gt;Caddy&lt;/a&gt; and &lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;, but specifing the &lt;a href=&#34;https://caddyserver.com/docs/root&#34;&gt;root&lt;/a&gt; of the site is enough for me.&lt;/p&gt;

&lt;p&gt;After run, automatically I got this blog running in HTTPS. _o/&lt;/p&gt;

&lt;p&gt;To access my applications, I add subdomains to the Caddyfile, for example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;xyz.gmnt.net {
  proxy / localhost:1234 {
    proxy_header X-Real-IP {remote}
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I have no reason to move from &lt;a href=&#34;https://www.nginx.com/&#34;&gt;Nginx&lt;/a&gt; to &lt;a href=&#34;https://caddyserver.com/&#34;&gt;Caddy&lt;/a&gt;, except the feature of setup HTTPS easily with Caddy. I tried, it works, then no reason to go back.&lt;/p&gt;

&lt;p&gt;Congratulations to &lt;a href=&#34;https://caddyserver.com/&#34;&gt;Caddy&lt;/a&gt; and &lt;a href=&#34;https://letsencrypt.org/&#34;&gt;Let&amp;#39;s Encrypt&lt;/a&gt; for the nice work!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using mutt in the browser</title>
      <link>//gmonnerat.github.io/public/post/gotty-simple-command-line-tool/</link>
      <pubDate>Tue, 18 Aug 2015 03:55:44 +0200</pubDate>
      
      <guid>//gmonnerat.github.io/public/post/gotty-simple-command-line-tool/</guid>
      <description>&lt;p&gt;Today I saw a nice and easy to use command line tool, called &lt;a href=&#34;https://github.com/yudai/gotty&#34;&gt;GoTTY&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I just did:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ go get github.com/yudai/gotty

$ gotty -p 8081 -w mutt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Done. With this, I am able to use my favorite e-mail client, &lt;a href=&#34;http://www.mutt.org/&#34;&gt;mutt&lt;/a&gt;, in the browser.&lt;/p&gt;

&lt;p&gt;For now, I used &lt;a href=&#34;https://support.ssh.com/manuals/server-admin/32/Port_Forwarding.html&#34;&gt;Port Forwarding&lt;/a&gt;
because there is no authentication support yet. But, when added will be
interesting.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>